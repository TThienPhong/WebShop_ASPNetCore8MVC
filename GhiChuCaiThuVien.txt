Net core web mvc

-Kết nối thử CSDL
-appsettings.json thêm chủi liên kết vào: 
"ConnectionStrings":{"MyDB":"..." },
-Cài các thư viên (=>nuget):
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools
//Microsoft.EntityFrameworkCore.Design

-mở Package Manager Console:
	1.Scaffold-DbContext "Server=(localdb)\mssqllocaldb;Database=Blogging;Trusted_Connection=True; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -f
or =>	2.Scaffold-DbContext "Data Source=admin;Initial Catalog=DB_test_SanPam_Loai;Integrated Security=True;Encrypt=True;Trust Server Certificate=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -f

-Đăng ký sử dụng MyDBContext: trong program/satup.cs
builder.Services.AddDbContext<DbTestSanPamLoaiContext>(options => {
    options.UseSqlServer(builder.Configuration.GetConnectionString("MyDB"));
});	



----------------- Sử Dụng Session:
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-8.0#configure-session-state
***Trong program/satup.cs: Cấu hình trạng thái Session

-AddSession:=>
	
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromSeconds(10);
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

-UseSession=>
app.UseSession();

***Tạo static Class SessionExtensions trong thư mục Helpers
 public static class SessionExtensions
 {
     public static void Set<T>(this ISession session, string key, T value)
     {
         session.SetString(key, JsonSerializer.Serialize(value));
     }

     public static T? Get<T>(this ISession session, string key)
     {
         var value = session.GetString(key);
         return value == null ? default : JsonSerializer.Deserialize<T>(value);
     }
 }




*Sử dụng:
const string CART_KEY = "MYCART";
public List<CartItem> Cart
	=>HttpContext.Session.Get<List<CartItem>>(CART_KEY) ?? new List<CartItem>();


bênh trong phương thức gọi ra ,lưu kết quả
{
Var gioHang=Cart;
//Code sử lý
HttpContext.Session.Set(CART_KEY, gioHang);
}


----------Thư viện AutoMapper dùng để map đối tượng từ kiểu này sang kiểu khác
Cần cài package: AutoMapper.Extensions.Microsoft.DependencyInjection//hết sử dụng
                  AutoMapper 
Định nghĩa lớp Map giữa 2 kiểu dữ liệu:
public class AutoMapperProfile : Profile
{
	public AutoMapperProfile()
	{
		CreateMap<RegisterVM, KhachHang>();	}
}
Đăng ký sử dụng ở Program.cs:
builder.Services.AddAutoMapper(typeof(AutoMapperProfile));

Cách dùng:/kết hợp context
public class KhachHangController : Controller 
{
	private readonly Hshop2023Context db;
	private readonly IMapper _mapper;

	public KhachHangController(Hshop2023Context context, IMapper mapper)
	{
		db = context;
		_mapper = mapper;
	}
	public IActionResult DangKy(RegisterVM model, IFormFile Hinh)
	{...
	var khachHang = _mapper.Map<KhachHang>(model);
	khachHang.RandomKey = MyUtil.GenerateRamdomKey();
	khachHang.MatKhau = model.MatKhau.ToMd5Hash(khachHang.RandomKey);
	khachHang.HieuLuc = true;//nếu có thời gian dùng Mail để active
	khachHang.VaiTro = 0;
	....
	}

}

---------------------Mã hoá mật khẩu
Trong thư mục thư mục Helpers
public static class DataEncryptionExtensions
{
	#region [Hashing Extension]
	public static string ToSHA256Hash(this string password, string? saltKey)
	{
		var sha256 = SHA256.Create();
		byte[] encryptedSHA256 = sha256.ComputeHash(Encoding.UTF8.GetBytes(string.Concat(password, saltKey)));
		sha256.Clear();

		return Convert.ToBase64String(encryptedSHA256);
	}

	public static string ToSHA512Hash(this string password, string? saltKey)
	{
		SHA512Managed sha512 = new SHA512Managed();
		byte[] encryptedSHA512 = sha512.ComputeHash(Encoding.UTF8.GetBytes(string.Concat(password, saltKey)));
		sha512.Clear();

		return Convert.ToBase64String(encryptedSHA512);
	}

	public static string ToMd5Hash(this string password, string? saltKey)
	{
		using (var md5 = MD5.Create())
		{
			byte[] data = md5.ComputeHash(Encoding.UTF8.GetBytes(string.Concat(password, saltKey)));
			StringBuilder sBuilder = new StringBuilder();
			for (int i = 0; i < data.Length; i++)
			{
				sBuilder.Append(data[i].ToString("x2"));
			}

			return sBuilder.ToString();
		}
	}

	#endregion
}


=>Cánh dùng: using WebShop_ASPNetCore8MVC_v1.Helpers;

khachHang.MatKhau = model.MatKhau.ToMd5Hash(khachHang.RandomKey);

